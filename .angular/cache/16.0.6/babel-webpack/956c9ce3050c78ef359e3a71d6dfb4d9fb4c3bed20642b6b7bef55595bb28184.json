{"ast":null,"code":"var _class;\nimport { ElementRef } from '@angular/core';\nimport { FormControl, Validators, FormControlName } from '@angular/forms';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./course.service\";\nfunction CourseEditComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.errorMessage, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/courses\"];\n};\nclass CourseEditComponent {\n  get tags() {\n    return this.courseForm.get('tags');\n  }\n  constructor(fb, route, router, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.pageTitle = 'Course Edit';\n    this.errorMessage = '';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      courseName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      courseCode: {\n        required: 'Product code is required.'\n      }\n      // starRating: {\n      //   range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      // }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.courseForm = this.fb.group({\n      productName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      imageUrl: [''],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = Number(this.route.snapshot.paramMap.get('id'));\n      this.getProduct(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getProduct(id) {\n    console.log(id);\n    this.productService.getProduct(id).subscribe({\n      next: product => this.displayProduct(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayProduct(product) {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      imageUrl: this.product.imageUrl,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n  deleteProduct() {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else if (this.product.id) {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveProduct() {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = {\n          ...this.product,\n          ...this.productForm.value\n        };\n        if (p.id === 0) {\n          this.productService.createProduct(p).subscribe({\n            next: x => {\n              console.log(x);\n              return this.onSaveComplete();\n            },\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n}\n_class = CourseEditComponent;\n_class.ɵfac = function CourseEditComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CourseService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  viewQuery: function CourseEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(FormControlName, 5, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formInputElements = _t);\n    }\n  },\n  decls: 28,\n  vars: 15,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\", \"mb-2\"], [\"for\", \"courseNameId\", 1, \"col-md-2\", \"col-form-label\"], [1, \"col-md-8\"], [\"id\", \"courseNameId\", \"type\", \"text\", \"placeholder\", \"Name (required)\", \"formControlName\", \"courseName\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"for\", \"courseCodeId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"courseCodeId\", \"type\", \"text\", \"placeholder\", \"Code (required)\", \"formControlName\", \"courseCode\", 1, \"form-control\", 3, \"ngClass\"], [1, \"offset-md-2\", \"col-md-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"title\", \"disabled\"], [\"type\", \"button\", \"title\", \"Cancel your edits\", 1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"routerLink\"], [\"type\", \"button\", \"title\", \"Delete this course\", 1, \"btn\", \"btn-outline-warning\", 2, \"width\", \"80px\", 3, \"click\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n  template: function CourseEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function CourseEditComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.saveCourse();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Course Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"span\", 8);\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Course Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 6);\n      i0.ɵɵelement(16, \"input\", 10);\n      i0.ɵɵelementStart(17, \"span\", 8);\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 4)(20, \"div\", 11)(21, \"button\", 12);\n      i0.ɵɵtext(22, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 13);\n      i0.ɵɵtext(24, \" Cancel \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function CourseEditComponent_Template_button_click_25_listener() {\n        return ctx.deleteCourse();\n      });\n      i0.ɵɵtext(26, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(27, CourseEditComponent_div_27_Template, 2, 1, \"div\", 15);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.courseForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.displayMessage.courseName));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.courseName, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c0, ctx.displayMessage.courseCode));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.courseCode, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"title\", ctx.courseForm.valid ? \"Save your entered data\" : \"Disabled until the form data is valid\")(\"disabled\", !ctx.courseForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(14, _c1));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  encapsulation: 2\n});\nexport { CourseEditComponent };","map":{"version":3,"names":["ElementRef","FormControl","Validators","FormControlName","fromEvent","merge","debounceTime","NumberValidators","GenericValidator","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","errorMessage","CourseEditComponent","tags","courseForm","get","constructor","fb","route","router","productService","pageTitle","displayMessage","validationMessages","courseName","required","minlength","maxlength","courseCode","genericValidator","ngOnInit","group","productName","minLength","maxLength","productCode","starRating","range","imageUrl","array","description","sub","paramMap","subscribe","params","id","Number","snapshot","getProduct","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","productForm","valueChanges","pipe","value","processMessages","addTag","push","deleteTag","index","removeAt","markAsDirty","console","log","next","product","displayProduct","error","err","reset","patchValue","setControl","deleteProduct","onSaveComplete","confirm","saveProduct","valid","dirty","p","createProduct","x","updateProduct","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","Router","i3","CourseService","selectors","viewQuery","CourseEditComponent_Query","rf","ctx","ɵɵlistener","CourseEditComponent_Template_form_ngSubmit_4_listener","saveCourse","ɵɵelement","CourseEditComponent_Template_button_click_25_listener","deleteCourse","ɵɵtemplate","CourseEditComponent_div_27_Template","ɵɵproperty","ɵɵpureFunction1","_c0","ɵɵpureFunction0","_c1"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\Angular-Project---apm\\src\\app\\products\\product-edit.component.ts","C:\\Users\\LENOVO\\P10\\demo\\Angular-Project---apm\\src\\app\\products\\course-edit.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Observable, Subscription, fromEvent, merge } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { course } from './course';\r\nimport { CourseService } from './course.service';\r\n\r\nimport { NumberValidators } from '../shared/number.validator';\r\nimport { GenericValidator } from '../shared/generic-validator';\r\n\r\n@Component({\r\n  templateUrl: './course-edit.component.html'\r\n})\r\nexport class CourseEditComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements!: ElementRef[];\r\n\r\n  pageTitle = 'Course Edit';\r\n  errorMessage = '';\r\n  courseForm!: FormGroup;\r\n\r\n  Croduct!: course;\r\n  private sub!: Subscription;\r\n\r\n  // Use with the generic validation message class\r\n  displayMessage: { [key: string]: string } = {};\r\n  private validationMessages: { [key: string]: { [key: string]: string } };\r\n  private genericValidator: GenericValidator;\r\n\r\n  get tags(): FormArray {\r\n    return this.courseForm.get('tags') as FormArray;\r\n  }\r\n\r\n  constructor(private fb: FormBuilder,\r\n              private route: ActivatedRoute,\r\n              private router: Router,\r\n              private productService: CourseService) {\r\n\r\n    // Defines all of the validation messages for the form.\r\n    // These could instead be retrieved from a file or database.\r\n    this.validationMessages = {\r\n      courseName: {\r\n        required: 'Product name is required.',\r\n        minlength: 'Product name must be at least three characters.',\r\n        maxlength: 'Product name cannot exceed 50 characters.'\r\n      },\r\n      courseCode: {\r\n        required: 'Product code is required.'\r\n      }\r\n      // starRating: {\r\n      //   range: 'Rate the product between 1 (lowest) and 5 (highest).'\r\n      // }\r\n    };\r\n\r\n    // Define an instance of the validator for use with this form,\r\n    // passing in this form's set of validation messages.\r\n    this.genericValidator = new GenericValidator(this.validationMessages);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.courseForm = this.fb.group({\r\n      productName: ['', [Validators.required,\r\n                         Validators.minLength(3),\r\n                         Validators.maxLength(50)]],\r\n      productCode: ['', Validators.required],\r\n      starRating: ['', NumberValidators.range(1, 5)],\r\n      imageUrl: [''],\r\n      tags: this.fb.array([]),\r\n      description: ''\r\n    });\r\n\r\n    // Read the product Id from the route parameter\r\n    this.sub = this.route.paramMap.subscribe(\r\n      params => {\r\n        const id = Number(this.route.snapshot.paramMap.get('id'));\r\n        this.getProduct(id);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Watch for the blur event from any input element on the form.\r\n    // This is required because the valueChanges does not provide notification on blur\r\n    const controlBlurs: Observable<any>[] = this.formInputElements\r\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n    // Merge the blur event observable with the valueChanges observable\r\n    // so we only need to subscribe once.\r\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(\r\n      debounceTime(800)\r\n    ).subscribe(value => {\r\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\r\n    });\r\n  }\r\n\r\n  addTag(): void {\r\n    this.tags.push(new FormControl());\r\n  }\r\n\r\n  deleteTag(index: number): void {\r\n    this.tags.removeAt(index);\r\n    this.tags.markAsDirty();\r\n  }\r\n\r\n  getProduct(id: number): void {\r\n    console.log(id)\r\n    this.productService.getProduct(id)\r\n      .subscribe({\r\n        next: (product: Product) => this.displayProduct(product),\r\n        error: err => this.errorMessage = err\r\n      });\r\n  }\r\n\r\n  displayProduct(product: Product): void {\r\n    if (this.productForm) {\r\n      this.productForm.reset();\r\n    }\r\n    this.product = product;\r\n\r\n    if (this.product.id === 0) {\r\n      this.pageTitle = 'Add Product';\r\n    } else {\r\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\r\n    }\r\n\r\n    // Update the data on the form\r\n    this.productForm.patchValue({\r\n      productName: this.product.productName,\r\n      productCode: this.product.productCode,\r\n      starRating: this.product.starRating,\r\n      imageUrl: this.product.imageUrl,\r\n      description: this.product.description\r\n    });\r\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\r\n  }\r\n\r\n  deleteProduct(): void {\r\n    if (this.product.id === 0) {\r\n      // Don't delete, it was never saved.\r\n      this.onSaveComplete();\r\n    } else if (this.product.id) {\r\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\r\n        this.productService.deleteProduct(this.product.id)\r\n          .subscribe({\r\n            next: () => this.onSaveComplete(),\r\n            error: err => this.errorMessage = err\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  saveProduct(): void {\r\n    if (this.productForm.valid) {\r\n      if (this.productForm.dirty) {\r\n        const p = { ...this.product, ...this.productForm.value };\r\n\r\n        if (p.id === 0) {\r\n          this.productService.createProduct(p)\r\n            .subscribe({\r\n              next: x => {\r\n                console.log(x);\r\n                return this.onSaveComplete();\r\n              },\r\n              error: err => this.errorMessage = err\r\n            });\r\n        } else {\r\n          this.productService.updateProduct(p)\r\n            .subscribe({\r\n              next: () => this.onSaveComplete(),\r\n              error: err => this.errorMessage = err\r\n            });\r\n        }\r\n      } else {\r\n        this.onSaveComplete();\r\n      }\r\n    } else {\r\n      this.errorMessage = 'Please correct the validation errors.';\r\n    }\r\n  }\r\n\r\n  onSaveComplete(): void {\r\n    // Reset the form to clear the flags\r\n    this.productForm.reset();\r\n    this.router.navigate(['/products']);\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-header\">\r\n    {{pageTitle}}\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <form novalidate\r\n          (ngSubmit)=\"saveCourse()\"\r\n          [formGroup]=\"courseForm\">\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"courseNameId\">Course Name</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"courseNameId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Name (required)\"\r\n                 formControlName=\"courseName\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.courseName }\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.courseName}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"courseCodeId\">Course Code</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"courseCodeId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Code (required)\"\r\n                 formControlName=\"courseCode\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.courseCode}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.courseCode}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      <!-- <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"imageUrl\">Image URL</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"imageUrl\"\r\n                 type=\"text\"\r\n                 placeholder=\"Enter the image Url\"\r\n                 formControlName=\"imageUrl\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.imageUrl}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.imageUrl}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div formArrayName=\"tags\">\r\n        <div class=\"form-group row mb-2\"\r\n             *ngFor=\"let tag of tags.controls; let i=index\">\r\n          <label class=\"col-md-2 col-form-label\"\r\n                 [attr.for]=\"i\">Tag</label>\r\n\r\n          <div class=\"col-md-8\">\r\n            <input class=\"form-control\"\r\n                   [id]=\"i\"\r\n                   type=\"text\"\r\n                   placeholder=\"Tag\"\r\n                   [formControlName]=\"i\" />\r\n          </div>\r\n          <button class=\"col-md-1 btn btn-outline-warning btn-sm\"\r\n                  type=\"button\"\r\n                  title=\"Delete this search tag\"\r\n                  (click)=\"deleteTag(i)\">Delete Tag\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-2 mb-2\">\r\n          <button class=\"btn btn-outline-secondary btn-sm\"\r\n                  type=\"button\"\r\n                  title=\"Add a search tag\"\r\n                  (click)=\"addTag()\">Add Tag\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"descriptionId\">Description</label>\r\n\r\n        <div class=\"col-md-8\">\r\n          <textarea class=\"form-control\"\r\n                    id=\"descriptionId\"\r\n                    placeholder=\"Description\"\r\n                    rows=3\r\n                    formControlName=\"description\"\r\n                    [ngClass]=\"{'is-invalid': displayMessage.description}\"></textarea>\r\n          <span class=\"invalid-feedback\">\r\n            {{ displayMessage.description}}\r\n          </span>\r\n        </div>\r\n      </div> -->\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <div class=\"offset-md-2 col-md-4\">\r\n          <button class=\"btn btn-primary mr-3\"\r\n                  style=\"width:80px;\"\r\n                  type=\"submit\"\r\n                  [title]=\"courseForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\"\r\n                  [disabled]=\"!courseForm.valid\">\r\n            Save\r\n          </button>\r\n          <button class=\"btn btn-outline-secondary mr-3\"\r\n                  style=\"width:80px;\"\r\n                  type=\"button\"\r\n                  title=\"Cancel your edits\"\r\n                  [routerLink]=\"['/courses']\">\r\n            Cancel\r\n          </button>\r\n          <button class=\"btn btn-outline-warning\"\r\n                  style=\"width:80px\"\r\n                  type=\"button\"\r\n                  title=\"Delete this course\"\r\n                  (click)=\"deleteCourse()\">\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"alert alert-danger\"\r\n       *ngIf=\"errorMessage\">{{errorMessage}}\r\n  </div>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}