{"ast":null,"code":"var _class;\nimport { ElementRef } from '@angular/core';\nimport { Validators, FormControlName } from '@angular/forms';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./course.service\";\nimport * as i4 from \"@angular/common\";\nfunction CourseEditComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.errorMessage, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/courses\"];\n};\nclass CourseEditComponent {\n  // get tags(): FormArray {\n  //   return this.courseForm.get('tags') as FormArray;\n  // }\n  constructor(fb, route, router, courseService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.courseService = courseService;\n    this.pageTitle = 'Course Edit';\n    this.errorMessage = '';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      courseName: {\n        required: 'Course name is required.',\n        minlength: 'Course name must be at least three characters.',\n        maxlength: 'Course name cannot exceed 50 characters.'\n      },\n      courseCode: {\n        required: 'Course code is required.'\n      }\n      // starRating: {\n      //   range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      // }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.courseForm = this.fb.group({\n      courseName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      courseCode: ['', Validators.required],\n      startDate: ['', Validators.required],\n      price: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)]\n      // imageUrl: [''],\n      // tags: this.fb.array([]),\n      // description: ''\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = Number(this.route.snapshot.paramMap.get('id'));\n      this.getCourse(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.courseForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.courseForm);\n    });\n  }\n  // addTag(): void {\n  //   this.tags.push(new FormControl());\n  // }\n  // deleteTag(index: number): void {\n  //   this.tags.removeAt(index);\n  //   this.tags.markAsDirty();\n  // }\n  getCourse(id) {\n    console.log(id);\n    this.courseService.getCourse(id).subscribe({\n      next: Course => this.displayCourse(Course),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayCourse(Course) {\n    if (this.courseForm) {\n      this.courseForm.reset();\n    }\n    this.Course = Course;\n    if (this.Course.id === 0) {\n      this.pageTitle = 'Add Course';\n    } else {\n      this.pageTitle = `Edit Course: ${this.Course.courseName}`;\n    }\n    // Update the data on the form\n    this.courseForm.patchValue({\n      courseName: this.Course.courseName,\n      courseCode: this.Course.courseCode\n      // starRating: this.product.starRating,\n      // imageUrl: this.product.imageUrl,\n      // description: this.product.description\n    });\n    //this.courseForm.setControl('tags', this.fb.array(this.Course.tags || []));\n  }\n\n  deleteCourse() {\n    if (this.Course.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else if (this.Course.id) {\n      if (confirm(`Are you sure you want to delete the course, ${this.Course.courseName}?`)) {\n        this.courseService.deleteCourse(this.Course.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveCourse() {\n    if (this.courseForm.valid) {\n      if (this.courseForm.dirty) {\n        const p = {\n          ...this.Course,\n          ...this.courseForm.value\n        };\n        if (p.id === 0) {\n          this.courseService.createCourses(p).subscribe({\n            next: x => {\n              console.log(x);\n              return this.onSaveComplete();\n            },\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.courseService.updateCourse(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.courseForm.reset();\n    this.router.navigate(['/courses']);\n  }\n}\n_class = CourseEditComponent;\n_class.ɵfac = function CourseEditComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CourseService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  viewQuery: function CourseEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(FormControlName, 5, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formInputElements = _t);\n    }\n  },\n  decls: 49,\n  vars: 27,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\", \"mb-2\"], [\"for\", \"courseNameId\", 1, \"col-md-2\", \"col-form-label\"], [1, \"col-md-8\"], [\"id\", \"courseNameId\", \"type\", \"text\", \"placeholder\", \"Name (required)\", \"formControlName\", \"courseName\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"for\", \"courseCodeId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"courseCodeId\", \"type\", \"text\", \"placeholder\", \"Code (required)\", \"formControlName\", \"courseCode\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"startDateId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"startDateId\", \"type\", \"text\", \"placeholder\", \"Start Date (required)\", \"formControlName\", \"startDate\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"priceId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"priceId\", \"type\", \"text\", \"placeholder\", \"Price (Required)\", \"formControlName\", \"price\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"starRatingId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"starRatingId\", \"type\", \"text\", \"placeholder\", \"Rating (1-5)\", \"formControlName\", \"starRating\", 1, \"form-control\", 3, \"ngClass\"], [1, \"offset-md-2\", \"col-md-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"title\", \"disabled\"], [\"type\", \"button\", \"title\", \"Cancel your edits\", 1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"routerLink\"], [\"type\", \"button\", \"title\", \"Delete this course\", 1, \"btn\", \"btn-outline-warning\", 2, \"width\", \"80px\", 3, \"click\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n  template: function CourseEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function CourseEditComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.saveCourse();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Course Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"span\", 8);\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Course Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 6);\n      i0.ɵɵelement(16, \"input\", 10);\n      i0.ɵɵelementStart(17, \"span\", 8);\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 4)(20, \"label\", 11);\n      i0.ɵɵtext(21, \"Start Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 6);\n      i0.ɵɵelement(23, \"input\", 12);\n      i0.ɵɵelementStart(24, \"span\", 8);\n      i0.ɵɵtext(25);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(26, \"div\", 4)(27, \"label\", 13);\n      i0.ɵɵtext(28, \"Price\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 6);\n      i0.ɵɵelement(30, \"input\", 14);\n      i0.ɵɵelementStart(31, \"span\", 8);\n      i0.ɵɵtext(32);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(33, \"div\", 4)(34, \"label\", 15);\n      i0.ɵɵtext(35, \"Star Rating (1-5)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 6);\n      i0.ɵɵelement(37, \"input\", 16);\n      i0.ɵɵelementStart(38, \"span\", 8);\n      i0.ɵɵtext(39);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(40, \"div\", 4)(41, \"div\", 17)(42, \"button\", 18);\n      i0.ɵɵtext(43, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"button\", 19);\n      i0.ɵɵtext(45, \" Cancel \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"button\", 20);\n      i0.ɵɵlistener(\"click\", function CourseEditComponent_Template_button_click_46_listener() {\n        return ctx.deleteCourse();\n      });\n      i0.ɵɵtext(47, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(48, CourseEditComponent_div_48_Template, 2, 1, \"div\", 21);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.courseForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(16, _c0, ctx.displayMessage.courseName));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.courseName, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(18, _c0, ctx.displayMessage.courseCode));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.courseCode, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(20, _c0, ctx.displayMessage.startDate));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.startDate, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(22, _c0, ctx.displayMessage.price));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.price, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c0, ctx.displayMessage.starRating));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.starRating, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"title\", ctx.courseForm.valid ? \"Save your entered data\" : \"Disabled until the form data is valid\")(\"disabled\", !ctx.courseForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(26, _c1));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  encapsulation: 2\n});\nexport { CourseEditComponent };","map":{"version":3,"names":["ElementRef","Validators","FormControlName","fromEvent","merge","debounceTime","NumberValidators","GenericValidator","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","errorMessage","CourseEditComponent","constructor","fb","route","router","courseService","pageTitle","displayMessage","validationMessages","courseName","required","minlength","maxlength","courseCode","genericValidator","ngOnInit","courseForm","group","minLength","maxLength","startDate","price","starRating","range","sub","paramMap","subscribe","params","id","Number","snapshot","get","getCourse","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","valueChanges","pipe","value","processMessages","console","log","next","Course","displayCourse","error","err","reset","patchValue","deleteCourse","onSaveComplete","confirm","saveCourse","valid","dirty","p","createCourses","x","updateCourse","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","Router","i3","CourseService","selectors","viewQuery","CourseEditComponent_Query","rf","ctx","ɵɵlistener","CourseEditComponent_Template_form_ngSubmit_4_listener","ɵɵelement","CourseEditComponent_Template_button_click_46_listener","ɵɵtemplate","CourseEditComponent_div_48_Template","ɵɵproperty","ɵɵpureFunction1","_c0","ɵɵpureFunction0","_c1"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\src\\app\\courses\\course-edit.component.ts","C:\\Users\\LENOVO\\P10\\demo\\src\\app\\courses\\course-edit.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Observable, Subscription, fromEvent, merge } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { course } from './course';\r\nimport { CourseService } from './course.service';\r\n\r\nimport { NumberValidators } from '../shared/number.validator';\r\nimport { GenericValidator } from '../shared/generic-validator';\r\n\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  templateUrl: './course-edit.component.html'\r\n})\r\nexport class CourseEditComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements!: ElementRef[];\r\n\r\n  pageTitle = 'Course Edit';\r\n  errorMessage = '';\r\n  courseForm!: FormGroup;\r\n\r\n  Course!: course;\r\n  private sub!: Subscription;\r\n\r\n  // Use with the generic validation message class\r\n  displayMessage: { [key: string]: string } = {};\r\n  private validationMessages: { [key: string]: { [key: string]: string } };\r\n  private genericValidator: GenericValidator;\r\n\r\n  // get tags(): FormArray {\r\n  //   return this.courseForm.get('tags') as FormArray;\r\n  // }\r\n\r\n  constructor(private fb: FormBuilder,\r\n              private route: ActivatedRoute,\r\n              private router: Router,\r\n              private courseService: CourseService) {\r\n\r\n    // Defines all of the validation messages for the form.\r\n    // These could instead be retrieved from a file or database.\r\n    this.validationMessages = {\r\n      courseName: {\r\n        required: 'Course name is required.',\r\n        minlength: 'Course name must be at least three characters.',\r\n        maxlength: 'Course name cannot exceed 50 characters.'\r\n      },\r\n      courseCode: {\r\n        required: 'Course code is required.'\r\n      }\r\n      // starRating: {\r\n      //   range: 'Rate the product between 1 (lowest) and 5 (highest).'\r\n      // }\r\n    };\r\n\r\n    // Define an instance of the validator for use with this form,\r\n    // passing in this form's set of validation messages.\r\n    this.genericValidator = new GenericValidator(this.validationMessages);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.courseForm = this.fb.group({\r\n      courseName: ['', [Validators.required,\r\n                         Validators.minLength(3),\r\n                         Validators.maxLength(50)]],\r\n      courseCode: ['', Validators.required],\r\n      startDate: ['', Validators.required],\r\n      price: ['', Validators.required],\r\n      starRating: ['', NumberValidators.range(1, 5)],\r\n      // imageUrl: [''],\r\n      // tags: this.fb.array([]),\r\n      // description: ''\r\n    });\r\n\r\n    // Read the product Id from the route parameter\r\n    this.sub = this.route.paramMap.subscribe(\r\n      params => {\r\n        const id = Number(this.route.snapshot.paramMap.get('id'));\r\n        this.getCourse(id);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Watch for the blur event from any input element on the form.\r\n    // This is required because the valueChanges does not provide notification on blur\r\n    const controlBlurs: Observable<any>[] = this.formInputElements\r\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n    // Merge the blur event observable with the valueChanges observable\r\n    // so we only need to subscribe once.\r\n    merge(this.courseForm.valueChanges, ...controlBlurs).pipe(\r\n      debounceTime(800)\r\n    ).subscribe(value => {\r\n      this.displayMessage = this.genericValidator.processMessages(this.courseForm);\r\n    });\r\n  }\r\n\r\n  // addTag(): void {\r\n  //   this.tags.push(new FormControl());\r\n  // }\r\n\r\n  // deleteTag(index: number): void {\r\n  //   this.tags.removeAt(index);\r\n  //   this.tags.markAsDirty();\r\n  // }\r\n\r\n  getCourse(id: number): void {\r\n    console.log(id)\r\n    this.courseService.getCourse(id)\r\n      .subscribe({\r\n        next: (Course: course) => this.displayCourse(Course),\r\n        error: err => this.errorMessage = err\r\n      });\r\n  }\r\n\r\n  displayCourse(Course: course): void {\r\n    if (this.courseForm) {\r\n      this.courseForm.reset();\r\n    }\r\n    this.Course = Course;\r\n\r\n    if (this.Course.id === 0) {\r\n      this.pageTitle = 'Add Course';\r\n    } else {\r\n      this.pageTitle = `Edit Course: ${this.Course.courseName}`;\r\n    }\r\n\r\n    // Update the data on the form\r\n    this.courseForm.patchValue({\r\n      courseName: this.Course.courseName,\r\n      courseCode: this.Course.courseCode,\r\n      // starRating: this.product.starRating,\r\n      // imageUrl: this.product.imageUrl,\r\n      // description: this.product.description\r\n    });\r\n    //this.courseForm.setControl('tags', this.fb.array(this.Course.tags || []));\r\n  }\r\n\r\n  deleteCourse(): void {\r\n    if (this.Course.id === 0) {\r\n      // Don't delete, it was never saved.\r\n      this.onSaveComplete();\r\n    } else if (this.Course.id) {\r\n      if (confirm(`Are you sure you want to delete the course, ${this.Course.courseName}?`)) {\r\n        this.courseService.deleteCourse(this.Course.id)\r\n          .subscribe({\r\n            next: () => this.onSaveComplete(),\r\n            error: err => this.errorMessage = err\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  saveCourse(): void {\r\n    if (this.courseForm.valid) {\r\n      if (this.courseForm.dirty) {\r\n        const p = { ...this.Course, ...this.courseForm.value };\r\n\r\n        if (p.id === 0) {\r\n          this.courseService.createCourses(p)\r\n            .subscribe({\r\n              next: x => {\r\n                console.log(x);\r\n                return this.onSaveComplete();\r\n              },\r\n              error: err => this.errorMessage = err\r\n            });\r\n        } else {\r\n          this.courseService.updateCourse(p)\r\n            .subscribe({\r\n              next: () => this.onSaveComplete(),\r\n              error: err => this.errorMessage = err\r\n            });\r\n        }\r\n      } else {\r\n        this.onSaveComplete();\r\n      }\r\n    } else {\r\n      this.errorMessage = 'Please correct the validation errors.';\r\n    }\r\n  }\r\n\r\n  onSaveComplete(): void {\r\n    // Reset the form to clear the flags\r\n    this.courseForm.reset();\r\n    this.router.navigate(['/courses']);\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-header\">\r\n    {{pageTitle}}\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <form novalidate\r\n          (ngSubmit)=\"saveCourse()\"\r\n          [formGroup]=\"courseForm\">\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"courseNameId\">Course Name</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"courseNameId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Name (required)\"\r\n                 formControlName=\"courseName\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.courseName }\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.courseName}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"courseCodeId\">Course Code</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"courseCodeId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Code (required)\"\r\n                 formControlName=\"courseCode\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.courseCode}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.courseCode}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"startDateId\">Start Date</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"startDateId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Start Date (required)\"\r\n                 formControlName=\"startDate\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.startDate}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.startDate}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"priceId\">Price</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"priceId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Price (Required)\"\r\n                 formControlName=\"price\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.price}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.price}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"starRatingId\">Star Rating (1-5)</label>\r\n\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"starRatingId\"\r\n                 type=\"text\"\r\n                 placeholder=\"Rating (1-5)\"\r\n                 formControlName=\"starRating\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.starRating}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.starRating}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      <!-- <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"imageUrl\">Image URL</label>\r\n        <div class=\"col-md-8\">\r\n          <input class=\"form-control\"\r\n                 id=\"imageUrl\"\r\n                 type=\"text\"\r\n                 placeholder=\"Enter the image Url\"\r\n                 formControlName=\"imageUrl\"\r\n                 [ngClass]=\"{'is-invalid': displayMessage.imageUrl}\" />\r\n          <span class=\"invalid-feedback\">\r\n            {{displayMessage.imageUrl}}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div formArrayName=\"tags\">\r\n        <div class=\"form-group row mb-2\"\r\n             *ngFor=\"let tag of tags.controls; let i=index\">\r\n          <label class=\"col-md-2 col-form-label\"\r\n                 [attr.for]=\"i\">Tag</label>\r\n\r\n          <div class=\"col-md-8\">\r\n            <input class=\"form-control\"\r\n                   [id]=\"i\"\r\n                   type=\"text\"\r\n                   placeholder=\"Tag\"\r\n                   [formControlName]=\"i\" />\r\n          </div>\r\n          <button class=\"col-md-1 btn btn-outline-warning btn-sm\"\r\n                  type=\"button\"\r\n                  title=\"Delete this search tag\"\r\n                  (click)=\"deleteTag(i)\">Delete Tag\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-2 mb-2\">\r\n          <button class=\"btn btn-outline-secondary btn-sm\"\r\n                  type=\"button\"\r\n                  title=\"Add a search tag\"\r\n                  (click)=\"addTag()\">Add Tag\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"form-group row mb-2\">\r\n        <label class=\"col-md-2 col-form-label\"\r\n               for=\"descriptionId\">Description</label>\r\n\r\n        <div class=\"col-md-8\">\r\n          <textarea class=\"form-control\"\r\n                    id=\"descriptionId\"\r\n                    placeholder=\"Description\"\r\n                    rows=3\r\n                    formControlName=\"description\"\r\n                    [ngClass]=\"{'is-invalid': displayMessage.description}\"></textarea>\r\n          <span class=\"invalid-feedback\">\r\n            {{ displayMessage.description}}\r\n          </span>\r\n        </div>\r\n      </div> -->\r\n\r\n      <div class=\"form-group row mb-2\">\r\n        <div class=\"offset-md-2 col-md-4\">\r\n          <button class=\"btn btn-primary mr-3\"\r\n                  style=\"width:80px;\"\r\n                  type=\"submit\"\r\n                  [title]=\"courseForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\"\r\n                  [disabled]=\"!courseForm.valid\">\r\n            Save\r\n          </button>\r\n          <button class=\"btn btn-outline-secondary mr-3\"\r\n                  style=\"width:80px;\"\r\n                  type=\"button\"\r\n                  title=\"Cancel your edits\"\r\n                  [routerLink]=\"['/courses']\">\r\n            Cancel\r\n          </button>\r\n          <button class=\"btn btn-outline-warning\"\r\n                  style=\"width:80px\"\r\n                  type=\"button\"\r\n                  title=\"Delete this course\"\r\n                  (click)=\"deleteCourse()\">\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"alert alert-danger\"\r\n       *ngIf=\"errorMessage\">{{errorMessage}}\r\n  </div>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}