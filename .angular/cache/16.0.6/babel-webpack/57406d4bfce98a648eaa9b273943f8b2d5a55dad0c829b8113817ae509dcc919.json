{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CourseService {\n  constructor(http) {\n    this.http = http;\n    this.coursesUrl = 'http://localhost:3000/coursesList'; // JSON Server endpoint\n  }\n\n  getCourses() {\n    return this.http.get(this.coursesUrl).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getCourse(id) {\n    if (id === 0) {\n      return of(this.initializeCourse());\n    }\n    const url = `${this.coursesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getCourse: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  createCourses(Course) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    Course.id = null;\n    return this.http.post(this.coursesUrl, Course, {\n      headers\n    }).pipe(tap(data => console.log('createCourse: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  deleteCourse(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.coursesUrl}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteCourse: ' + id)), catchError(this.handleError));\n  }\n  updateCourse(Course) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.coursesUrl}/${Course.id}`;\n    return this.http.put(url, Course, {\n      headers\n    }).pipe(tap(() => console.log('updateCourse: ' + Course.id)),\n    // Return the Course on an update\n    map(() => Course), catchError(this.handleError));\n  }\n  // ... Other methods (getProduct, createProduct, deleteProduct, updateProduct) remain the same\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  initializeCourse() {\n    // Return an initialized object\n    return {\n      id: 0,\n      courseName: '[]',\n      courseCode: '[]',\n      startDate: '',\n      price: 0,\n      startRating: 0\n    };\n  }\n}\n_class = CourseService;\n_class.ɵfac = function CourseService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { CourseService };","map":{"version":3,"names":["HttpHeaders","of","throwError","catchError","tap","map","CourseService","constructor","http","coursesUrl","getCourses","get","pipe","data","console","log","JSON","stringify","handleError","getCourse","id","initializeCourse","url","createCourses","Course","headers","post","deleteCourse","delete","updateCourse","put","err","errorMessage","error","ErrorEvent","message","status","courseName","courseCode","startDate","price","startRating","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\src\\app\\courses\\course.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { course } from './course';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseService {\r\n  private coursesUrl = 'http://localhost:3000/coursesList'; // JSON Server endpoint\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCourses(): Observable<course[]> {\r\n    return this.http.get<course[]>(this.coursesUrl)\r\n      .pipe(\r\n        tap(data => console.log(JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getCourse(id: number): Observable<course> {\r\n    if (id === 0) {\r\n      return of(this.initializeCourse());\r\n    }\r\n    const url = `${this.coursesUrl}/${id}`;\r\n    return this.http.get<course>(url)\r\n      .pipe(\r\n        tap(data => console.log('getCourse: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createCourses(Course: course): Observable<course> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    Course.id = null;\r\n    return this.http.post<course>(this.coursesUrl, Course, { headers })\r\n      .pipe(\r\n        tap(data => console.log('createCourse: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteCourse(id: number): Observable<{}> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.coursesUrl}/${id}`;\r\n    return this.http.delete<course>(url, { headers })\r\n      .pipe(\r\n        tap(data => console.log('deleteCourse: ' + id)),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateCourse(Course: course): Observable<course> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const url = `${this.coursesUrl}/${Course.id}`;\r\n    return this.http.put<course>(url, Course, { headers })\r\n      .pipe(\r\n        tap(() => console.log('updateCourse: ' + Course.id)),\r\n        // Return the Course on an update\r\n        map(() => Course),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // ... Other methods (getProduct, createProduct, deleteProduct, updateProduct) remain the same\r\n\r\n  private handleError(err: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => errorMessage);\r\n  }\r\n\r\n   private initializeCourse(): course {\r\n    // Return an initialized object\r\n    return {\r\n      id: 0,\r\n      courseName: '[]',\r\n      courseCode: '[]',\r\n      startDate:'',\r\n      price:0,\r\n      startRating:0,\r\n      \r\n    };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}